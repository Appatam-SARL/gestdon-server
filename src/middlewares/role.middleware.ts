import { NextFunction, Request, Response } from 'express';
import { AppError } from '../utils/AppError';

// Types possibles d'utilisateurs
type UserType = 'user' | 'driver' | 'partner' | 'admin';

// R√¥les possibles pour les admins
type AdminRole = 'SUPER_ADMIN' | 'admin' | 'user';

/**
 * Middleware pour v√©rifier que l'utilisateur est d'un type autoris√©
 */
export const roleMiddleware = (allowedTypes: UserType[]) => {
  return (req: Request, res: Response, next: NextFunction) => {
    // V√©rifier si le type d'utilisateur est d√©fini
    console.log('üöÄ ~ return ~ req.userType:', req.userType);
    if (!req.userType) {
      return next(new AppError('Utilisateur non authentifi√©', 401));
    }

    // V√©rifier si le type d'utilisateur est autoris√©
    if (!allowedTypes.includes(req.userType as UserType)) {
      return next(
        new AppError(
          `Acc√®s non autoris√©. Type requis: ${allowedTypes.join(' ou ')}`,
          403
        )
      );
    }

    // Si le type est autoris√©, passer au middleware suivant
    next();
  };
};

/**
 * Middleware pour v√©rifier que l'admin a un r√¥le sp√©cifique
 */
export const adminRoleMiddleware = (allowedRoles: AdminRole[]) => {
  return (req: Request, res: Response, next: NextFunction) => {
    // V√©rifier si c'est un admin
    // if (req.userType !== 'admin' || !req.userType !== 'user') {
    //   return next(new AppError('Acc√®s r√©serv√© aux administrateurs', 403));
    // }

    // V√©rifier si le r√¥le admin est d√©fini
    if (!req.userRole) {
      return next(new AppError('R√¥le administrateur non d√©fini', 401));
    }

    // V√©rifier si le r√¥le admin est autoris√©
    if (!allowedRoles.includes(req.userRole as AdminRole)) {
      return next(
        new AppError(
          `Acc√®s non autoris√©. R√¥le requis: ${allowedRoles.join(' ou ')}`,
          403
        )
      );
    }

    // Si le r√¥le est autoris√©, passer au middleware suivant
    next();
  };
};
